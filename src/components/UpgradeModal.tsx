import React, { useRef, useEffect } from "react";
import { useUpgrade } from "../context/UpgradeContext";
import "./upgrade.css";

export default function UpgradeModal() {
  const { open, closeModal, tab, setTab } = useUpgrade();
  const panelRef = useRef<HTMLDivElement | null>(null);

  // click ra ngoài để đóng
  useEffect(() => {
    const onClick = (e: MouseEvent) => {
      const t = e.target as Node;
      if (!open) return;
      if (panelRef.current && !panelRef.current.contains(t)) closeModal();
    };
    document.addEventListener("mousedown", onClick);
    return () => document.removeEventListener("mousedown", onClick);
  }, [open, closeModal]);

  if (!open) return null;

  return (
    <>
      <div className="upg-overlay" />
      <div
        className="upg-wrap"
        role="dialog"
        aria-modal="true"
        aria-label="Upgrade Plans"
      >
        <div ref={panelRef} className="upg-panel">
          {/* header */}
          <div className="upg-header">
            <h3>Upgrade</h3>
            <div className="upg-tabs">
              <button
                className={`tab ${tab === "monthly" ? "active" : ""}`}
                onClick={() => setTab("monthly")}
              >
                Monthly
              </button>
              <button
                className={`tab ${tab === "yearly" ? "active" : ""}`}
                onClick={() => setTab("yearly")}
                title="Save 50%"
              >
                Yearly <span className="save">-50%</span>
              </button>
            </div>
            <button className="x-btn" onClick={closeModal} aria-label="Close">
              ✕
            </button>
          </div>

          {/* body scroll */}
          <div className="upg-body">
            <PlansRow tab={tab} />

            <section className="edu">
              <h4>DTL Education Plan</h4>
              <p>
                If you are a current student or educator, apply for our
                education program to receive a discount.
              </p>
              <button className="pill-action">Apply Now →</button>
            </section>

            <div className="coupon">
              If you'd like to use a coupon other than the New User 50% Off
              First Month offer, please click the button to remove the current
              coupon from your account.
              <button className="ghost">Remove Coupon</button>
            </div>

            <section className="credits">
              <h4>
                Or Purchase Extra Credits{" "}
                <span className="muted">(Subscriber only)</span>
              </h4>
              <div className="credit-row">
                <CreditBox
                  price="$8"
                  amount="200 credits"
                  unit="$4.00 / 100 credits"
                />
                <CreditBox
                  price="$32"
                  note="-20%"
                  amount="1,000 credits"
                  unit="$3.20 / 100 credits"
                />
                <CreditBox
                  price="$96"
                  note="-40%"
                  amount="4,000 credits"
                  unit="$2.40 / 100 credits"
                />
              </div>
            </section>

            <div className="footer-note">
              Purchased credits do not expire or reset monthly, but you must
              have an active subscription to purchase and use them.
              <button className="primary-wide">Subscriber Only</button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

/* ---- Sub components ---- */

function PlansRow({ tab }: { tab: "monthly" | "yearly" }) {
  const price = (m: number, y?: number) =>
    tab === "monthly" ? `$${m}/month` : `$${y ?? m * 12 * 0.5}/year`;
  return (
    <div className="plan-grid">
      <PlanCard
        title="Free"
        price="$0"
        line="No credit card needed"
        badge="Current plan"
        ctaLabel="Current plan"
        features={[
          "100 monthly credits recharge",
          "10 task waiting in queue",
          "10 downloads per month of models generated by legacy AI models",
          "Limited queue priority",
          "Assets are under CC BY 4.0 license",
          "20 animation library presets",
        ]}
        variant="dim"
        disabled
      />

      <PlanCard
        title="Pro"
        price={tab === "monthly" ? "$10 /month" : "$60 /year"}
        line="Best for individual creators"
        highlight={
          tab === "monthly" ? "New User Offer: 50% Off First Month" : undefined
        }
        ctaLabel="Subscribe Now"
        secondayCta="Pay with PayPal"
        features={[
          "1000 monthly credits recharge",
          "10 task waiting in queue",
          "Download models generated by the latest AI model",
          "Unlimited generated model downloads per month",
          "Standard queue priority",
          "Assets are private & customer owned",
          "API access",
          "Free retries per generation",
          "Multi-view image to 3D",
          "Download community models",
          "Over 500 animation library presets",
        ]}
      />

      <PlanCard
        title="Studio"
        price={tab === "monthly" ? "$60 /seat /month" : "$360 /seat /year"}
        line="Best for studios and teams"
        ctaLabel="Subscribe Now"
        features={[
          "Team management",
          "4000 monthly credits recharge",
          "20 task waiting in queue",
          "Download models generated by the latest AI model",
          "Unlimited generated model downloads per month",
          "Maximized queue priority",
          "Assets are private & customer owned",
          "API access",
          "Remesh and custom polycounts",
          "Multi-view image to 3D",
          "Download community models",
          "Over 500 animation library presets",
        ]}
      />

      <PlanCard
        title="Enterprise"
        price="Contact Us"
        line="For orgs that need large volume usage, customized solutions, and more"
        ctaLabel="Contact Us"
        variant="outline"
        features={[
          "Multiple team/workspace management",
          "Customizable credit recharge",
          "50+ task waiting in queue",
          "Highest AI throughput",
          "Unlimited free retries per generation",
          "Full AI feature access",
          "Highest queue priority",
          "Assets are private & customer owned",
          "API asset retention",
          "SAML SSO",
          "Dedicated account support",
        ]}
      />
    </div>
  );
}

function PlanCard(props: {
  title: string;
  price: string;
  line: string;
  ctaLabel: string;
  features: string[];
  secondayCta?: string;
  highlight?: string;
  badge?: string;
  variant?: "dim" | "outline";
  disabled?: boolean;
}) {
  const {
    title,
    price,
    line,
    ctaLabel,
    features,
    secondayCta,
    highlight,
    badge,
    variant,
    disabled,
  } = props;
  return (
    <article className={`plan ${variant ?? ""} ${disabled ? "disabled" : ""}`}>
      {highlight && <div className="plan-ribbon">{highlight}</div>}
      <header className="plan-head">
        <h5>{title}</h5>
        <div className="plan-price">{price}</div>
        <p className="muted">{line}</p>
      </header>

      <div className="plan-cta">
        <button
          className={`btn-cta ${disabled ? "ghost" : ""}`}
          disabled={disabled}
        >
          {ctaLabel}
        </button>
        {secondayCta && <button className="btn-ghost">{secondayCta}</button>}
      </div>

      <ul className="plan-features">
        {features.map((f, i) => (
          <li key={i}>✔ {f}</li>
        ))}
      </ul>

      {badge && <div className="plan-badge">{badge}</div>}
    </article>
  );
}

function CreditBox({
  price,
  amount,
  unit,
  note,
}: {
  price: string;
  amount: string;
  unit: string;
  note?: string;
}) {
  return (
    <div className="credit">
      <div className="credit-price">
        {price} {note && <span className="note">{note}</span>}
      </div>
      <div className="credit-amount">{amount}</div>
      <div className="credit-unit">{unit}</div>
      <button className="btn-cta small">Buy</button>
    </div>
  );
}
